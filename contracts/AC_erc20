pragma solidity >=0.4.22 <0.9.0;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "./ERC20Base";

interface IERC20 {

    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract ERC20AC is IERC20, AccessControl,ERC20Basic{
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    constructor() ERC20("ERC20AC", "ERC") {
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    }
    function promoteMinter(address minter) public onlyRole(DEFAULT_ADMIN_ROLE)
    {
        grantRole(MINTER_ROLE,minter);
    }
    function remoteMinter(address minter) public onlyRole(DEFAULT_ADMIN_ROLE)
    {
        revokeRole(MINTER_ROLE,minter);
    }

    function mint(address recipient,uint amount) public onlyRole(MINTER_ROLE){
        require(totalSupply+amount>=totalSupply);
        totalSupply+=amount;
        balances[recipient]+=amount;
        emit Transfer(address(0),recipient,amount);
    }
}